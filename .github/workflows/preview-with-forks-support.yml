name: Build SDKs for pull request (including forks)

# SECURITY: This workflow uses pull_request_target to support PRs from forks.
# pull_request_target runs in the context of the base repository and has access
# to secrets. To prevent malicious code from accessing secrets, you MUST configure
# your repository settings to require approval before running workflows from forks:
#
# Settings → Actions → General → Fork pull request workflows from outside collaborators
# → Select "Require approval for all outside collaborators"
#
# This ensures that a maintainer must approve the workflow before it runs on any
# PR from a fork, preventing unauthorized access to STAINLESS_API_KEY and other secrets.

on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  # Stainless organization name.
  STAINLESS_ORG: sam-testing-pr-from-forks

  # Stainless project name.
  STAINLESS_PROJECT: sam-testing-pr-from-forks-1

  # Path to your OpenAPI spec.
  OAS_PATH: ./openapi.yaml

  # Path to your Stainless config. Optional; only provide this if you prefer
  # to maintain the ground truth Stainless config in your own repo.
  # CONFIG_PATH: YOUR_CONFIG_PATH

  # When to fail the job based on build conclusion.
  # Options: "never" | "note" | "warning" | "error" | "fatal".
  FAIL_ON: error

  # In your repo secrets, configure:
  # - STAINLESS_API_KEY: a Stainless API key, which you can generate on the
  #   Stainless organization dashboard

jobs:
  preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      # IMPORTANT: When using pull_request_target, actions/checkout defaults to
      # checking out the base branch. We must explicitly check out the PR head.
      # We set persist-credentials: false to prevent the GITHUB_TOKEN from being
      # written to the local git config, reducing the risk of malicious code in
      # the PR accessing the token.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
          persist-credentials: false

      - name: Run preview builds
        uses: stainless-api/upload-openapi-spec-action/preview@v1
        with:
          stainless_api_key: ${{ secrets.STAINLESS_API_KEY }}
          org: ${{ env.STAINLESS_ORG }}
          project: ${{ env.STAINLESS_PROJECT }}
          oas_path: ${{ env.OAS_PATH }}
#          config_path: ${{ env.CONFIG_PATH }}
          fail_on: ${{ env.FAIL_ON }}

  merge:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Note that this only merges in changes that happened on the last build on
      # preview/${{ github.head_ref }}. It's possible that there are OAS/config
      # changes that haven't been built, if the preview-sdk job didn't finish
      # before this step starts. In theory we want to wait for all builds
      # against preview/${{ github.head_ref }} to complete, but assuming that
      # the preview-sdk job happens before the PR merge, it should be fine.
      - name: Run merge build
        uses: stainless-api/upload-openapi-spec-action/merge@v1
        with:
          stainless_api_key: ${{ secrets.STAINLESS_API_KEY }}
          org: ${{ env.STAINLESS_ORG }}
          project: ${{ env.STAINLESS_PROJECT }}
          oas_path: ${{ env.OAS_PATH }}
#          config_path: ${{ env.CONFIG_PATH }}
          fail_on: ${{ env.FAIL_ON }}
